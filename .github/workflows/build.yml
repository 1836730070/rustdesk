name: Build RustDesk Prebuilt

on:
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: 检出代码和子模块
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: 安装 Rust
      run: |
        curl -sSf -o rustup-init.exe https://win.rustup.rs/x86_64
        .\rustup-init.exe -y --default-toolchain stable
        echo "C:\Users\runneradmin\.cargo\bin" >> $env:GITHUB_PATH

    - name: 安装构建工具
      run: |
        choco install -y nasm yasm

    - name: 下载预编译的 Windows 依赖
      run: |
        # 创建依赖目录
        mkdir deps
        cd deps
        
        # 下载 opus 预编译库 (示例URL，可能需要替换为实际可用的)
        curl -L -o opus.zip https://github.com/xiph/opus/releases/download/v1.3.1/opus-v1.3.1-windows.zip || echo "下载opus失败，尝试继续..."
        
        if (Test-Path "opus.zip") {
            Expand-Archive opus.zip -Force
            echo "opus库解压完成"
        }
        
        # 设置库路径
        echo "OPUS_DIR=$pwd\opus" >> $env:GITHUB_ENV

    - name: 手动配置 Cargo 使用系统库
      run: |
        # 创建 cargo 配置目录
        mkdir -p .cargo
        @"
        [target.x86_64-pc-windows-msvc]
        rustflags = [
            "-L", "deps/opus/lib",
            "-C", "link-args=/LIBPATH:deps/opus/lib"
        ]
        "@ > .cargo/config.toml

    - name: 编译 RustDesk
      run: |
        # 设置环境变量让 magnum-opus 使用系统库
        $env:RUSTFLAGS = "-L deps/opus/lib -C link-args=/LIBPATH:deps/opus/lib"
        cargo build --release --bin rustdesk

    - name: 上传编译结果
      uses: actions/upload-artifact@v4
      with:
        name: rustdesk-windows-prebuilt
        path: target/release/rustdesk.exe
